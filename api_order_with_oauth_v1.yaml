openapi: 3.0.0
info:
  title: Order API
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/products/{id}':
    parameters:
      - schema:
          type: number
        name: id
        in: path
        required: true
        examples:
          GET_DETAILS:
            value: 10
          UPDATE_DETAILS:
            value: 10
          DELETE_PRODUCT:
            value: 20
          INVALID_ID:
            value: "344"
    get:
      summary: Fetch product details
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                GET_DETAILS:
                  value:
                    name: 'XYZ Phone'
                    type: 'gadget'
                    inventory: 10
                    id: 10
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  path:
                    type: string
              examples:
                INVALID_ID:
                  value:
                    timestamp: "2023-03-17T12:06:56.177+00:00"
                    status: 404
                    error: "Not Found"
                    path: "/products/344"
      operationId: get-product-id
    post:
      summary: Update product details
      operationId: post-products-id
      responses:
        '200':
          description: Update successful
          content:
            text/plain:
              schema:
                type: string
              examples:
                UPDATE_DETAILS:
                  value:
                    name: 'XYZ Fone'
                    type: 'gadget'
                    inventory: 10
                    id: 10
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              UPDATE_DETAILS:
                value:
                  name: 'XYZ Fone'
                  type: 'gadget'
                  inventory: 10
                  id: 10
    delete:
      summary: Delete a product
      operationId: delete-products-id
      responses:
        '200':
          description: Deletion successful
          content:
            text/plain:
              schema:
                type: string
              examples:
                DELETE_PRODUCT:
                  value: ''
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
  /products:
    post:
      summary: Add new product
      operationId: post-products
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductId'
              examples:
                ADD_PRODUCT:
                  value:
                    id: 10
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetails'
            examples:
              ADD_PRODUCT:
                value:
                  name: 'XYZ Laptop'
                  type: 'gadget'
                  inventory: 10
    get:
      summary: Search for products
      operationId: get-products
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                SEARCH_1:
                  value:
                    - name: 'XYZ Fone'
                      type: 'gadget'
                      inventory: 10
                      id: 3
                SEARCH_2:
                  value:
                    - name: 'XYZ Fone'
                      type: 'gadget'
                      inventory: 10
                      id: 3
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                type: string
              examples:
                SEARCH_ERROR:
                  value: unknown
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
      parameters:
        - schema:
            type: string
          in: query
          name: name
          examples:
            SEARCH_1:
              value: ''
            SEARCH_2:
              value: XYZ
            SEARCH_ERROR:
              value: unknown
        - schema:
            type: string
          in: query
          name: type
          examples:
            SEARCH_1:
              value: gadget
            SEARCH_2:
              value: gadget
            SEARCH_ERROR:
              value: ''
  /orders:
    post:
      summary: Create an order
      operationId: post-orders
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderId'
              examples:
                200_OK:
                  value:
                    id: 10
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetails'
            examples:
              200_OK:
                value:
                  productid: 10
                  count: 1
                  status: pending
    get:
      summary: Search for orders
      operationId: get-orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              examples:
                200_OK:
                  value:
                    - productid: 10
                      count: 2
                      status: 'pending'
                      id: 10
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
      parameters:
        - schema:
            type: number
          in: query
          name: productid
          examples:
            200_OK:
              value: 10
        - schema:
            type: string
          in: query
          name: status
          examples:
            200_OK:
              value: fulfilled
      description: ''
  '/orders/{id}':
    parameters:
      - schema:
          type: number
        name: id
        in: path
        required: true
        examples:
          DETAILS:
            value: 10
          INVALID_ID:
            value: 433
    get:
      summary: Fetch order details
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              examples:
                DETAILS:
                  value:
                    productid: 10
                    count: 2
                    status: 'pending'
                    id: 10
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  path:
                    type: string
              examples:
                INVALID_ID:
                  value:
                    timestamp: "2023-03-17T12:06:56.177+00:00"
                    status: 404
                    error: "Not Found"
                    path: "/orders/344"
      operationId: get-orders-id
      parameters: []
    post:
      summary: Update order details
      operationId: post-orders-id
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
              examples:
                UPDATE_ORDER:
                  value:
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              UPDATE_ORDER:
                value:
                  productid: 10
                  id: 10
                  count: 1
                  status: pending
    delete:
      summary: Cancel an order
      operationId: delete-orders-id
      responses:
        '200':
          description: Cancel successful
          content:
            text/plain:
              schema:
                type: string
              examples:
                DELETE_ORDER:
                  value:
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                  status:
                    type: integer
                  error:
                    type: string
                  message:
                    type: string
                  path:
                    type: string
components:
  schemas:
    ProductDetails:
      title: Product Details
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/ProductType'
        inventory:
          type: integer
      required:
        - name
        - type
        - inventory
    ProductType:
      type: string
      title: Product Type
      enum:
        - book
        - food
        - gadget
        - other
    ProductId:
      title: Product Id
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    Product:
      title: Product
      allOf:
        - $ref: '#/components/schemas/ProductId'
        - $ref: '#/components/schemas/ProductDetails'
    OrderDetails:
      title: Order Details
      type: object
      properties:
        productid:
          type: integer
        count:
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatus'
      required:
        - productid
        - count
        - status
    OrderStatus:
      type: string
      title: OrderStatus
      enum:
        - fulfilled
        - pending
        - cancelled
    OrderId:
      title: Order Id
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    Order:
      title: Order
      allOf:
        - $ref: '#/components/schemas/OrderId'
        - $ref: '#/components/schemas/OrderDetails'
  parameters:
    OrderStatusParam:
      name: OrderStatusParam
      in: query
      required: false
      schema:
        type: string
        enum:
          - fulfilled
          - pending
          - cancelled

  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: keycloak based oauth security example
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8083/realms/specmatic/protocol/openid-connect/auth
          tokenUrl: http://localhost:8083/realms/specmatic/protocol/openid-connect/token

security:
  - oAuth2AuthCode: []